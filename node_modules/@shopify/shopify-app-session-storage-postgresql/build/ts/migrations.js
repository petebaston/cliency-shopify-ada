"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateToCaseSensitivity = exports.migrateScopeFieldToVarchar1024 = exports.migrationList = void 0;
var tslib_1 = require("tslib");
var shopify_app_session_storage_1 = require("@shopify/shopify-app-session-storage");
exports.migrationList = [
    new shopify_app_session_storage_1.MigrationOperation('migrateScopeFieldToVarchar1024', migrateScopeFieldToVarchar1024),
    new shopify_app_session_storage_1.MigrationOperation('migrateToCaseSensitivity', migrateToCaseSensitivity),
];
// need change the size of the scope column from 255 to 1024 char
function migrateScopeFieldToVarchar1024(connection) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connection.query("ALTER TABLE \"".concat(connection.sessionStorageIdentifier, "\"\n    ALTER COLUMN \"scope\" TYPE varchar(1024)"))];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.migrateScopeFieldToVarchar1024 = migrateScopeFieldToVarchar1024;
function migrateToCaseSensitivity(connection) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var queries, hasOldColumnsQuery, rows, hasOldSessionTable;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    queries = [];
                    if (!(connection.sessionStorageIdentifier ===
                        connection.sessionStorageIdentifier.toLowerCase())) return [3 /*break*/, 2];
                    hasOldColumnsQuery = "\n      SELECT EXISTS (\n        SELECT column_name FROM information_schema.columns\n        WHERE table_schema='public' AND table_name = '".concat(connection.sessionStorageIdentifier, "' AND column_name='isonline'\n      )\n    ");
                    return [4 /*yield*/, connection.query(hasOldColumnsQuery)];
                case 1:
                    rows = _a.sent();
                    if (rows[0].exists) {
                        queries = [
                            "ALTER TABLE \"".concat(connection.sessionStorageIdentifier, "\" RENAME COLUMN \"isonline\" TO \"isOnline\""),
                            "ALTER TABLE \"".concat(connection.sessionStorageIdentifier, "\" RENAME COLUMN \"onlineaccessinfo\" TO \"onlineAccessInfo\""),
                            "ALTER TABLE \"".concat(connection.sessionStorageIdentifier, "\" RENAME COLUMN \"accesstoken\" TO \"accessToken\""),
                        ];
                    }
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, connection.hasTable(connection.sessionStorageIdentifier.toLowerCase())];
                case 3:
                    hasOldSessionTable = _a.sent();
                    if (hasOldSessionTable) {
                        queries = [
                            // 1. copy the data from the old table to the new one
                            "INSERT INTO \"".concat(connection.sessionStorageIdentifier, "\" (\n          \"id\", \"shop\", \"state\", \"isOnline\", \"scope\", \"expires\", \"onlineAccessInfo\", \"accessToken\"\n        )\n        SELECT id, shop, state, isonline, scope, expires, onlineaccessinfo, accesstoken\n        FROM \"").concat(connection.sessionStorageIdentifier.toLowerCase(), "\""),
                            // 2. drop the old table
                            "DROP TABLE \"".concat(connection.sessionStorageIdentifier.toLowerCase(), "\""),
                        ];
                    }
                    _a.label = 4;
                case 4:
                    if (!(queries.length !== 0)) return [3 /*break*/, 6];
                    // wrap in a transaction
                    queries.unshift("BEGIN");
                    queries.push("COMMIT");
                    return [4 /*yield*/, connection.transaction(queries)];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.migrateToCaseSensitivity = migrateToCaseSensitivity;
//# sourceMappingURL=migrations.js.map